c
q
MIME_TYPE[extension]
extension
n
q
File.extname(path)
file.extension
file.type
file.methods
file
c
q
"cats/cc".match(/public\/.*/).to_s.empty?
"cats/cc".match(/public\/.*/).to_s.rmpty?
"cats/cc".match(/public\/.*/).to_s
req.path.match(/public\/.*/).to_s
req.path.match(/\/public\/.*/).to_s
req.path.match(/\/public\/.*/)
req.path.scan(/\/public\/.*/)
req.path.scan(/\/public\/.+/)
req.path.scan(/\/public\/./)
req.path.scan(/\/public\/+/)
req.path.scan(/\/public\/\*/)
req.path.scan(/\/public\//)
req.path.scan(/\/public\/*/)
req.path.match(/\/public\/*/).to_s
req.path.match(/\/public\/*/)
req.path.match(/\/public\//)
req.path.match(/\/public\/*/)
req.path
req
n
up
s
q
req.path.split("/")
req.path.split("/")[1]
req.path
req = Rack::Request.new(env)
Rack::Request.new(env)
Rack::Response.new(env)
env
c
c'
q
env["PATH_INFO"][1..-1]
env["PATH_INFO"][0..-1]
env["PATH_INFO"]
env["PATH_INFO"].slice(0)
env["PATH_INFO"].drop(1)
env["PATH_INFO"]
File.read("public/cage.jpg")
File.read(env["PATH_INFO"])
env["PATH_INFO"]
c
env.path
env
q
e.backtrace
e.message
e.display
e.methods.sort
e.full_messages
e
c
app
quit
app.call
app
q
req.cookies
c
flash
c
flash
c
n
s
res
n
res
n
s
n
s
flash
c
q
n
flash
q
res
n
up
s
n
up
u
s
q
req.cookies
s
res.header.cookies
res.header.cookie
res.headers
res.header
res.cookie
res.cookies
res
n
up
s
flash
q
ERB.new(body).result(binding)
ERB.new(body).result(biding)
ERB.new(body).result
ERB.new(body)
body
c
body
quit
"test".to_s
@cookie[key.to_s]
key
@cookie[key.to_sym]
@cookie
c
@cookie
c
self
@cookie
q
params
q
params.names
params.methods.sort
params
q
req.params
req
@params
c
q
req.path
req
req.header
req.location
@pattern.match(req.location)
@pattern
param
quit
xit
proc
&proc
instance_eval(&proc)
c
@controller_class.new(req, res)
res
req
@controller_class.new
@controller_class
quit
exit
routes.find {|r| r.matches?(req) }
routes.find
req.path
req
c
req.path
pattern
res
req
q
req.path =~ /sss/
req.path
req.path =~ pattern
re.path =~ pattern
pattern =~ req.path
pattern == req.path
pattern.eql?(req.path)
pattern.eq(req.path)
pattern.q=ey=q(req.path)
pattern.match(req.path)
pattern.methods.sort
req.path.matches?(pattern)
req.path
pattern
http_method
req.request_method
q
@http_method
@pattern
@patterb
ivar
c
req
c
req
c
req
q
y
q
res
q
res
@cookie
q
cookie.class
cookie_val
cookie_hash
res
cookie_str
cookie
quit
req.cookies
q
@cookie.class
@cookie['xyz']
@cookie
c
q
@cookie["xyz"]
@cookie[xyz]
@cookie
q
res
q
@cookie
q
JSON.parse(c).class
JSON.parse(c)
c = req.cookies["_rails_lite_app"]
req.cookies["_rails_lite_app"].deserialize
req.cookies["_rails_lite_app"].class
req.cookies["_rails_lite_app"].to_json
req.cookies["_rails_lite_app"].methods.sort
req.cookies["_rails_lite_app"]
req.cookies["rails_lite_app"]
req.cookies
req[env]
req[@env]
req[:env]
req['env']
req
req[]
req.get_header
req.header
req.methods.sort
req.cooie_hash
req
req.get_cookie
req.cookie
rep.cookies
